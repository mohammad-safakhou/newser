services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: newser
      POSTGRES_PASSWORD: newser
      POSTGRES_DB: newser
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U newser"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  migration:
    build:
      context: .
      dockerfile: Dockerfile
    image: newser:latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NEWSER_STORAGE_POSTGRES_HOST: postgres
      NEWSER_STORAGE_POSTGRES_PORT: "5432"
      NEWSER_STORAGE_POSTGRES_USER: newser
      NEWSER_STORAGE_POSTGRES_PASSWORD: newser
      NEWSER_STORAGE_POSTGRES_DB: newser
      NEWSER_STORAGE_REDIS_HOST: redis
      NEWSER_STORAGE_REDIS_PORT: "6379"
    entrypoint: ["/usr/local/bin/newser"]
    command: ["migrate", "up"]
    restart: "no"
    volumes:
      - ./config:/app/config:ro

  api:
    image: newser:latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    environment:
      NEWSER_STORAGE_POSTGRES_HOST: postgres
      NEWSER_STORAGE_POSTGRES_PORT: "5432"
      NEWSER_STORAGE_POSTGRES_USER: newser
      NEWSER_STORAGE_POSTGRES_PASSWORD: newser
      NEWSER_STORAGE_POSTGRES_DB: newser
      NEWSER_STORAGE_REDIS_HOST: redis
      NEWSER_STORAGE_REDIS_PORT: "6379"
      CORS_ALLOW_ORIGINS: "http://localhost:3000"
      JWT_SECRET: dev-secret-change-me
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      NEWSER_TELEMETRY_OTLP_ENDPOINT: otel-collector:4317
    entrypoint: ["/usr/local/bin/api"]
    command: ["--config", "/app/config/config.json"]
    ports:
      - "10001:10001"
    volumes:
      - ./config:/app/config:ro

  worker:
    image: newser:latest
    depends_on:
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    environment:
      NEWSER_STORAGE_POSTGRES_HOST: postgres
      NEWSER_STORAGE_POSTGRES_PORT: "5432"
      NEWSER_STORAGE_POSTGRES_USER: newser
      NEWSER_STORAGE_POSTGRES_PASSWORD: newser
      NEWSER_STORAGE_POSTGRES_DB: newser
      NEWSER_STORAGE_REDIS_HOST: redis
      NEWSER_STORAGE_REDIS_PORT: "6379"
      NEWSER_TELEMETRY_OTLP_ENDPOINT: otel-collector:4317
    entrypoint: ["/usr/local/bin/worker"]
    command: ["--config", "/app/config/config.json"]
    volumes:
      - ./config:/app/config:ro

  executor:
    image: newser:latest
    depends_on:
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    environment:
      NEWSER_STORAGE_POSTGRES_HOST: postgres
      NEWSER_STORAGE_POSTGRES_PORT: "5432"
      NEWSER_STORAGE_POSTGRES_USER: newser
      NEWSER_STORAGE_POSTGRES_PASSWORD: newser
      NEWSER_STORAGE_POSTGRES_DB: newser
      NEWSER_STORAGE_REDIS_HOST: redis
      NEWSER_STORAGE_REDIS_PORT: "6379"
      NEWSER_TELEMETRY_OTLP_ENDPOINT: otel-collector:4317
    entrypoint: ["/usr/local/bin/executor"]
    command: ["--config", "/app/config/config.json"]
    volumes:
      - ./config:/app/config:ro

  crawler:
    image: newser:latest
    depends_on:
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    environment:
      NEWSER_STORAGE_POSTGRES_HOST: postgres
      NEWSER_STORAGE_POSTGRES_PORT: "5432"
      NEWSER_STORAGE_POSTGRES_USER: newser
      NEWSER_STORAGE_POSTGRES_PASSWORD: newser
      NEWSER_STORAGE_POSTGRES_DB: newser
      NEWSER_STORAGE_REDIS_HOST: redis
      NEWSER_STORAGE_REDIS_PORT: "6379"
      NEWSER_TELEMETRY_OTLP_ENDPOINT: otel-collector:4317
    entrypoint: ["/usr/local/bin/crawler"]
    command: ["--config", "/app/config/config.json"]
    volumes:
      - ./config:/app/config:ro

  memory:
    image: newser:latest
    depends_on:
      redis:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      otel-collector:
        condition: service_started
    environment:
      NEWSER_STORAGE_POSTGRES_HOST: postgres
      NEWSER_STORAGE_POSTGRES_PORT: "5432"
      NEWSER_STORAGE_POSTGRES_USER: newser
      NEWSER_STORAGE_POSTGRES_PASSWORD: newser
      NEWSER_STORAGE_POSTGRES_DB: newser
      NEWSER_STORAGE_REDIS_HOST: redis
      NEWSER_STORAGE_REDIS_PORT: "6379"
      NEWSER_TELEMETRY_OTLP_ENDPOINT: otel-collector:4317
    entrypoint: ["/usr/local/bin/memory"]
    command: ["--config", "/app/config/config.json"]
    volumes:
      - ./config:/app/config:ro

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.102.0
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otelcol/config.yaml:ro
    command: ["--config=/etc/otelcol/config.yaml"]
    ports:
      - "4317:4317"

  tempo:
    image: grafana/tempo:2.4.1
    volumes:
      - ./observability/tempo.yaml:/etc/tempo.yaml:ro
    command: ["-config.file=/etc/tempo.yaml"]
    ports:
      - "3200:3200"

  prometheus:
    image: prom/prometheus:v2.54.1
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./observability/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
    command: ["--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.retention.time=24h"]
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:11.2.0
    ports:
      - "3001:3000"
    volumes:
      - ./observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./observability/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus
      - tempo

  webui:
    build:
      context: ./webui
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:10001}
    image: newser-webui:latest
    depends_on:
      - api
    ports:
      - "3000:3000"

volumes:
  pgdata: {}
  redisdata: {}
